---
AWSTemplateFormatVersion: "2010-09-09"
Description:  This template create Tables and Route Tables

Parameters:
  # Global parameters
  Bucket:
    Default: "hawkfund-cloudformation"
    Description: CloudFormation buket URL
    Type: String
  BucketKey:
    Default: ""
    Description: Key to find object in the bucket
    Type: String
  BucketObject:
    Default: "Data.json"
    Description: "File to store data in the bucket"
    Type: String
  EnvironmentName:
    AllowedValues: ["dev", "test", "staging", "prod"]
    ConstraintDescription: "Must specify dev, test or prod"
    Default: "dev"
    Description: "Environment name that prefix all resources"
    Type: String    
  ProjectName:
    Default: "ANS"
    Description: "Project name that prefix all resources"
    Type: String
  SaveInS3File:
    AllowedValues: [ "false", "true" ]
    Default: "false"
    Description: "Save resources information in s3 file"
    Type: String

  # Stack parameters
  DestinationCidrBlock:
    AllowedPattern: "^$|^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
    Default: ""
    Description: "The IPv4 CIDR address block used for the destination match."
    Type: String
  DestinationIpv6CidrBlock:
    Default: ""
    Description: "The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match."
    Type: String
  DestinationPrefixListId:
    AllowedPattern: "^$|^pl-[0-9a-f]{8,17}$"
    Default: ""
    Description: "The ID of a prefix list used for the destination match."
    Type: String
  TargetId:
    Type: String
    Description: ID of the target resource (gateway, instance, etc.)
  TargetType:
    AllowedValues:
      - "EgressOnlyInternetGateway"
      - "Instance"
      - "InternetGateway"
      - "LocalGateway"
      - "NatGateway"
      - "NetworkInterface"
      - "TransitGateway"
      - "VirtualPrivateGateway"
      - "VpcEndpoint"
      - "VpcPeeringConnection"
    Default: "InternetGateway"
    Description: "The destination type of the route"
    Type: String
  RouteTableId:
    Description: "The ID of the route table for the route."
    Type: String
  RouteTableName:
    Description: "The name of the Route Table"
    Type: String

Rules:
  DestinationValidation:
    Assertions:
      - Assert: !Or
          - !Not [!Equals [!Ref DestinationCidrBlock, ""]]
          - !Not [!Equals [!Ref DestinationIpv6CidrBlock, ""]]
          - !Not [!Equals [!Ref DestinationPrefixListId, ""]]
        AssertDescription: "At least one destination (CIDR, IPv6 CIDR, or Prefix List) must be specified"

Conditions:
  # Destination conditions
  HasDestinationCidr: !Not [!Equals [!Ref DestinationCidrBlock, ""]]
  HasDestinationIpv6Cidr: !Not [!Equals [!Ref DestinationIpv6CidrBlock, ""]]
  HasDestinationPrefixList: !Not [!Equals [!Ref DestinationPrefixListId, ""]]
  
  # Target type conditions (simplified)
  IsEgressOnlyIGW: !Equals [!Ref TargetType, "EgressOnlyInternetGateway"]
  IsInstance: !Equals [!Ref TargetType, "Instance"]
  IsGateway: !Or
    - !Equals [!Ref TargetType, "InternetGateway"]
    - !Equals [!Ref TargetType, "VirtualPrivateGateway"]
  IsLocalGateway: !Equals [!Ref TargetType, "LocalGateway"]
  IsNatGateway: !Equals [!Ref TargetType, "NatGateway"]
  IsNetworkInterface: !Equals [!Ref TargetType, "NetworkInterface"]
  IsTransitGateway: !Equals [!Ref TargetType, "TransitGateway"]
  IsVpcEndpoint: !Equals [!Ref TargetType, "VpcEndpoint"]
  IsVpcPeering: !Equals [!Ref TargetType, "VpcPeeringConnection"]
  IsVpnGateway: !Equals [!Ref TargetType, "VirtualPrivateGateway"]
  
  # S3 and utility conditions
  SaveInS3File: !Equals [ !Ref SaveInS3File, "true"]
  HasRouteTableName: !Not [!Equals [!Ref RouteTableName, ""]]

Resources:
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableId
      DestinationCidrBlock: !If [HasDestinationCidr, !Ref DestinationCidrBlock, !Ref "AWS::NoValue"]
      DestinationIpv6CidrBlock: !If [HasDestinationIpv6Cidr, !Ref DestinationIpv6CidrBlock, !Ref "AWS::NoValue"]
      DestinationPrefixListId: !If [HasDestinationPrefixList, !Ref DestinationPrefixListId, !Ref "AWS::NoValue"]
      EgressOnlyInternetGatewayId: !If [IsEgressOnlyIGW, !Ref TargetId, !Ref "AWS::NoValue"]
      GatewayId: !If [IsGateway, !Ref TargetId, !Ref "AWS::NoValue"]
      InstanceId: !If [IsInstance, !Ref TargetId, !Ref "AWS::NoValue"]
      LocalGatewayId: !If [IsLocalGateway, !Ref TargetId, !Ref "AWS::NoValue"]
      NatGatewayId: !If [IsNatGateway, !Ref TargetId, !Ref "AWS::NoValue"]
      NetworkInterfaceId: !If [IsNetworkInterface, !Ref TargetId, !Ref "AWS::NoValue"]
      TransitGatewayId: !If [IsTransitGateway, !Ref TargetId, !Ref "AWS::NoValue"]
      VpcEndpointId: !If [IsVpcEndpoint, !Ref TargetId, !Ref "AWS::NoValue"]
      VpcPeeringConnectionId: !If [IsVpcPeering, !Ref TargetId, !Ref "AWS::NoValue"]

  RouteTableToS3:
    Type: AWS::CloudFormation::CustomResource
    Condition: SaveInS3File
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !Join [ ":", [ "arn:aws:lambda", !Sub "${AWS::Region}", !Sub "${AWS::AccountId}", "function:EC2ResourceToS3"]]
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Ref BucketKey
      BucketObject: !Ref BucketObject
      Region: !Ref AWS::Region
      ResourceType: "RouteTable"
      Key: !If 
        - HasRouteTableName
        - !Sub "${AWS::Region}:${ProjectName}:${EnvironmentName}:EC2:RouteTable:${RouteTableName}"
        - !Sub "${AWS::Region}:${ProjectName}:${EnvironmentName}:EC2:RouteTable:${RouteTableId}"
      Value: !Ref RouteTableId

  VpnGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Condition: IsVpnGateway
    Properties:
      RouteTableIds: [!Ref RouteTableId]
      VpnGatewayId: !Ref TargetId

Outputs:
  RouteId:
    Description: ID of the created route
    Value: !Ref Route
    Export:
      Name: !Sub "${AWS::StackName}-RouteId"
      
  RouteTableId:
    Description: ID of the route table
    Value: !Ref RouteTableId
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableId"
      
  TargetType:
    Description: Type of route target
    Value: !Ref TargetType
    Export:
      Name: !Sub "${AWS::StackName}-TargetType"