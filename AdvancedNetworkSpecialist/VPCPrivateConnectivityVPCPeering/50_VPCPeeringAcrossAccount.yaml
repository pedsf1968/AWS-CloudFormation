# aws cloudformation validate-template --template-body file:/50_VPCPeeringAcrossAccount.yaml
# aws cloudformation create-stack --stack-name ANS-50 --template-body file://50_VPCPeeringAcrossAccount.yaml --region eu-west-3 --capabilities CAPABILITY_IAM
# aws cloudformation create-stack --stack-name ANS-50 --template-body file://50_VPCPeeringAcrossAccount.yaml --region eu-central-1 --capabilities CAPABILITY_IAM
# aws cloudformation delete-stack --stack-name ANS-50 --region eu-west-3
# aws cloudformation delete-stack --stack-name ANS-50 --region eu-central-1

AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys a VPC, Public and Private Subnets, Internet Gateway, Route Table, Custom DNS and Instances

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Configuration"
        Parameters:
          - BucketUrl
      - Label:
          default: "First Accounts"
        Parameters:
          - FirstAccountId
          - FirstRegion
          - FirstRoleArn
          - FirstVPCId
      - Label:
          default: "Second Accounts"
        Parameters:
          - SecondAccountId
          - SecondRegion
      - Label:
          default: "IGW, Route Tables and Routes"
        Parameters:
          - InternetGatewayName
          - DefaultRouteTableName

Parameters:
  BucketUrl:
    Description: CloudFormation buket URL
    Type: String
    Default: "https://hawkfund-cloudformation.s3.eu-west-3.amazonaws.com"
  FirstAccountId:
    Type: String
    Default: "612187453729"    
  FirstRegion:
    Type: String
    Default: eu-west-3
  SecondAccountId:
    Type: String
    # AllowedPattern: "^[0-9]+$"
    Default: "612187453729"
  SecondRegion:
    Type: String
    Default: eu-central-1
  # FirstRoleArn only for the second launch
  FirstRoleArn:
    Type: String
    Default: none
  # FirstVPCId only for the second launch
  FirstVPCId:
    Type: String
    Default: none
  InternetGatewayName:
    Type: String
    Default: "VPC-IGW"
  DefaultRouteTableName:
    Type: String
    Default: "VPC-Default-RT"

Mappings:
  RegionMap:
    eu-west-3:    
      PeerRegion: eu-central-1
      VPCName: "A-VPC"
      VPCCidrBlock: 10.10.0.0/16
      VPCPeeringConnectionName: "A-VPCPeering"
      SubnetName: "A-PublicSubnet"
      SubnetCidrBlock: 10.10.0.0/24
      SubnetPublic: True
      SubnetRouteTableName: A-SubnetRouteTable
      InstanceName: "A-Instance"
      InstanceImageId: ami-015875403620174eb
      KeyName: "dso-paris"
      InstanceSGCidr: 0.0.0.0/0
    eu-central-1:
      PeerRegion: eu-west-3
      VPCName: "B-VPC"
      VPCCidrBlock: 10.20.0.0/16
      VPCPeeringConnectionName: "B-VPCPeering"
      SubnetName: "B-PrivateSubnet"
      SubnetCidrBlock: 10.20.0.0/24
      SubnetPublic: False
      SubnetRouteTableName: B-SubnetRouteTable
      InstanceName: "B-Instance"
      InstanceImageId: ami-00060fac2f8c42d30
      KeyName: "dso-francfort"
      InstanceSGCidr: 10.10.0.0/16
      

Conditions:
  IsFirstAccount: !Equals [!Ref "AWS::Region", !Ref FirstRegion]
  IsSecondAccount: !Equals [!Ref "AWS::Region", !Ref SecondRegion]

Resources:
  Lambdas:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_10_Lambda.yaml"
      TimeoutInMinutes: 5

  VPCAndSubnets:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_20_VPCAndSubnets.yaml"
      TimeoutInMinutes: 5
      Parameters:
        VPCName: !FindInMap [RegionMap, !Ref "AWS::Region", VPCName]
        VPCCidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", VPCCidrBlock]
        SubnetName: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetName]
        SubnetCidrBlock:
          !FindInMap [RegionMap, !Ref "AWS::Region", SubnetCidrBlock]
        SubnetPublic: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetPublic]

  # Create a role for remote account to create VPC Peering
  PeerRole:
    Type: AWS::CloudFormation::Stack
    Condition: IsFirstAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_30_PeerRole.yaml"
      TimeoutInMinutes: 5
      Parameters:
        FirstAccountId: !Ref FirstAccountId
        VPCId: !GetAtt VPCAndSubnets.Outputs.VpcId
        PeerRequesterAccountId: !Ref SecondAccountId
        
  # Make VPC peering with the first account
  VPCPeering:
    Type: AWS::CloudFormation::Stack
    Condition: IsSecondAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_40_VPCPeering.yaml"
      TimeoutInMinutes: 5
      Parameters:
        VPCId: !GetAtt VPCAndSubnets.Outputs.VpcId
        PeerAccountId: !Ref FirstAccountId
        PeerRegion: !Ref FirstRegion
        PeerRoleArn: !Ref FirstRoleArn
        PeerVPCId: !Ref FirstVPCId

  # Create Internet Gateway and default route table for public subnet
  InternetGateway:
    Type: AWS::CloudFormation::Stack
    Condition: IsFirstAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_50_InternetGateway.yaml"
      TimeoutInMinutes: 5
      Parameters:
        VPCId: !GetAtt VPCAndSubnets.Outputs.VpcId
        SubnetId: !GetAtt VPCAndSubnets.Outputs.PublicSubnetId
        InternetGatewayName:  !Ref InternetGatewayName
        DefaultRouteTableName: !Ref DefaultRouteTableName

  SubnetRouteTables:
    Type: AWS::CloudFormation::Stack
    Condition: IsSecondAccount
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_60_SubnetRouteTables.yaml"
      TimeoutInMinutes: 5
      Parameters:
        VPCId: !GetAtt VPCAndSubnets.Outputs.VpcId
        SubnetId: !GetAtt VPCAndSubnets.Outputs.PrivateSubnetId
        SubnetRouteTableName: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetRouteTableName]
        VpcPeeringConnectionId: VPCPeering.Outputs.VPCPeeringConnectionId
        DestinationCidrBlock: !FindInMap [RegionMap, !FindInMap [RegionMap, !Ref "AWS::Region", PeerRegion], VPCCidrBlock]

  Instances:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "${BucketUrl}/VPCPeeringCrossAccount/50_70_Instances.yaml"
      TimeoutInMinutes: 5
      Parameters:
        VPCId: !GetAtt VPCAndSubnets.Outputs.VpcId
        SubnetId: !If [IsFirstAccount, !GetAtt VPCAndSubnets.Outputs.PublicSubnetId, !GetAtt VPCAndSubnets.Outputs.PrivateSubnetId]
        InstanceName: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceName]
        InstanceImageId: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceImageId]
        KeyName: !FindInMap [RegionMap, !Ref "AWS::Region", KeyName]
        InstanceSGCidr: !FindInMap [RegionMap, !Ref "AWS::Region",InstanceSGCidr]
    