---
AWSTemplateFormatVersion: "2010-09-09"
Description:  This template create a role for remote account to create VPC Peering

Parameters:  
  # Global parameters
  Bucket:
    Description: CloudFormation buket URL
    Type: String
  BucketKey:
    Description: Key to find object in the bucket
    Type: String
  BucketObject:
    Description: File in the bucket that contain parameters
    Type: String

  # Stack parameters
  DefaultRouteTableName:
    Type: String 
  SubnetRouteTableName:
    Type: String
  DestinationCidrBlock:
    Type: String
  SubnetPublic:
    Description: Define if the subnet is public
    Default: false
    Type: String
    AllowedValues:
      - true
      - false

Conditions:
  isPublicSubnet:
    !Equals ["true", !Ref SubnetPublic] 
  isPrivateSubnet:
    !Equals ["false", !Ref SubnetPublic] 

Resources:
  # Get VPC and Subnet ID
  GetVpcId:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetParametersFromS3"
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Sub "${AWS::AccountId}:${AWS::Region}:VPCID"

  GetSubnetId:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetParametersFromS3"
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Join [ ":", [!Sub "${AWS::AccountId}:${AWS::Region}", !If [isPublicSubnet, "PublicSubnet", "PrivateSubnet" ] ]]

  GetInternetGatewayId:
    Type: AWS::CloudFormation::CustomResource
    Condition: isPublicSubnet
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetParametersFromS3"
      ServiceTimeout: 180
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Join [ ":", [!Sub "${AWS::AccountId}:${AWS::Region}", "InternetGatewayId"]]

  # Get VPC Peering Connection ID
  GetVpcPeeringConnectionId:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:GetParametersFromS3"
      ServiceTimeout: 180
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: "VpcPeeringConnectionId"

  # Route, Route Table and Associations
  DefaultRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !GetAtt GetVpcId.Value
      Tags:
        - Key: Name
          Value: !Ref DefaultRouteTableName

  DefaultRouteTableBackup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:UpdateParametersFromS3"
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Sub "${AWS::AccountId}:${AWS::Region}:DefaultRouteTableId"
      Value: !Ref DefaultRouteTable


  # Route, Route Table and Associations
  SubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !GetAtt GetVpcId.Value
      Tags:
        - Key: Name
          Value: !Ref SubnetRouteTableName

  SubnetRouteTableBackup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:UpdateParametersFromS3"
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Sub "${AWS::AccountId}:${AWS::Region}:SubnetRouteTableId"
      Value: !Ref SubnetRouteTable

  # Trafic to internet in the public subnet
  EthernetRoute:
    Type: AWS::EC2::Route
    Condition: isPublicSubnet
    Properties:
      RouteTableId: !Ref SubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt GetInternetGatewayId.Value

  PeeringRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SubnetRouteTable
      DestinationCidrBlock: !Ref DestinationCidrBlock
      VpcPeeringConnectionId: !GetAtt GetVpcPeeringConnectionId.Value

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref SubnetRouteTable
      SubnetId: !GetAtt  GetSubnetId.Value

  SubnetRouteTableAssociationBackup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:UpdateParametersFromS3"
      ServiceTimeout: 60
      Bucket: !Ref Bucket
      BucketKey: !Sub "${BucketKey}/${BucketObject}"
      Key: !Sub "${AWS::AccountId}:${AWS::Region}:SubnetRouteTableAssociationId"
      Value: !Ref SubnetRouteTableAssociation

Outputs:
  SubnetRouteTableId:
    Value: !Ref SubnetRouteTable
  SubnetRouteTableAssociationId:
    Value: !Ref SubnetRouteTableAssociation