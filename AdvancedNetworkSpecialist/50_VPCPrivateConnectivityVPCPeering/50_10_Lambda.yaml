---
AWSTemplateFormatVersion: "2010-09-09"
Description:  This template for creating lambda used by CloudFormation other's stacks

Parameters:     
  Bucket:
    Description: CloudFormation buket URL
    Type: String
  BucketKey:
    Description: Key to find object in the bucket
    Type: String

Resources:
  UpdateParametersFromS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: !Sub ${AWS::StackName}-UpdateParametersFromS3Role
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:List*
            Resource: 
            - !Join [":", ["arn:aws:s3::", !Sub "${Bucket}/${BucketKey}"]]
            - !Join [":", ["arn:aws:s3::", !Sub "${Bucket}/${BucketKey}/*"]]
      RoleName: !Sub ${AWS::StackName}-UpdateParametersFromS3Role

  # Event JSON to test Lambda
  # {
  #   "Bucket": "hawkfund-cloudformation",
  #   "BucketKey": "VPCPeeringCrossAccount/VPCPrivateConnectivityVPCPeering.json",
  #   "Key": "VpcPeeringConnectionId",
  #  }
  GetParametersFromS3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import time

          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
            responseData  = {}
            bucket =  event["ResourceProperties"]["Bucket"]
            bucketKey = event["ResourceProperties"]["BucketKey"]
            parameterKey = event["ResourceProperties"]["Key"]
            try:
              obj = s3.Object(bucket, bucketKey)
              data = obj.get()['Body'].read().decode('utf-8')
              responseData["Value"] = json.loads(data)[parameterKey]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                            
            except Exception as err:
              responseData['Data'] = str(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Description: Function to read parameter from JSON file in a S3 bucket
      FunctionName: GetParametersFromS3
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt UpdateParametersFromS3Role.Arn
      Runtime: python3.9

  # Event JSON to test Lambda
  # {
  #   "Bucket": "hawkfund-cloudformation",
  #   "BucketKey": "VPCPeeringCrossAccount/VPCPrivateConnectivityVPCPeering.json",
  #   "Key": "VpcPeeringConnectionId",
  #   "Value": "titi"
  #  }
  UpdateParametersFromS3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json

          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
            responseData  = {}
            bucket =  event["ResourceProperties"]["Bucket"]
            bucketKey = event["ResourceProperties"]["BucketKey"]
            parameterKey = event["ResourceProperties"]["Key"]
            parameterValue = event["ResourceProperties"]["Value"]
            try:
              obj = s3.Object(bucket, bucketKey)
              data = obj.get()['Body'].read().decode('utf-8')
              json_data = json.loads(data)
              print('json_data 1: ', json_data)
              json_data[parameterKey] = parameterValue
              print('json_data 2: ', json_data)
              data = obj.put( Body=(bytes(json.dumps(json_data).encode('UTF-8'))))
              data = obj.get()['Body'].read().decode('utf-8')
              json_data = json.loads(data)
              print('json_data 3: ', json_data)
              responseData["Value"] = parameterValue 
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)                            
            except Exception as err:
              responseData['Data'] = str(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Description: Function to update parameter from JSON file in a S3 bucket
      FunctionName: UpdateParametersFromS3
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt UpdateParametersFromS3Role.Arn
      Runtime: python3.9

Outputs:
  GetParametersFromS3Arn:
    Description: ARN of GetParametersFromS3 Lambda
    Value: !GetAtt GetParametersFromS3.Arn
  UpdateParametersFromS3Arn:
    Description: ARN of UpdateParametersFromS3 Lambda
    Value: !GetAtt UpdateParametersFromS3.Arn    