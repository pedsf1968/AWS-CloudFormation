# aws cloudformation validate-template --template-body file:/51_VPCPeeringAcrossAccount.yaml
# aws cloudformation create-stack --stack-name ANS-50 --template-body file://51_ROOT_VPCPeeringAcrossAccount.yaml --region eu-west-3 --capabilities CAPABILITY_IAM
# aws cloudformation create-stack --stack-name ANS-50 --template-body file://51_ROOT_VPCPeeringAcrossAccount.yaml --region eu-central-1 --capabilities CAPABILITY_IAM
# aws cloudformation delete-stack --stack-name ANS-50 --region eu-west-3
# aws cloudformation delete-stack --stack-name ANS-50 --region eu-central-1
#
# Steps:
# 1 - Launch Phase1 on account 1
# 1 - Launch Phase1 on account 2
# 1 - Launch Phase2 on account 1
# 1 - Launch Phase2 on account 2


AWSTemplateFormatVersion: "2010-09-09"
Description: This template deploys a VPC, Public and Private Subnets, Internet Gateway, Route Table, Custom DNS and Instances

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - EnvironmentName
      - Label:
          default: "Configuration"
        Parameters:
          - Bucket
          - BucketKey
          - BucketObject
          - SaveInS3File
          - Phase
      - Label:
          default: "First Accounts"
        Parameters:
          - FirstAccountId
          - FirstRegion
      - Label:
          default: "Second Accounts"
        Parameters:
          - SecondAccountId
          - SecondRegion
      - Label:
          default: "IGW, Route Tables and Routes"
        Parameters:
          - InternetGatewayName

Parameters:
  # Global parameters
  Bucket:
    Default: "hawkfund-cloudformation"
    Description: CloudFormation buket URL
    Type: String
  BucketKey:
    Default: "51_VPCPeeringAcrossRegionAndAccount"
    Description: Key to find object in the bucket
    Type: String
  BucketObject:
    Default: "Data.json"
    Description: "File to store data in the bucket"
    Type: String
  EnvironmentName:
    AllowedValues: [ "dev", "test", "prod" ]
    ConstraintDescription: "Must specify dev, test or prod"
    Default: "dev"
    Description: "Environment name that prefix all resources"
    Type: String
  ProjectName:
    Default: "ANS"
    Description: "Project name that prefix all resources"
    Type: String
  SaveInS3File:
    AllowedValues: [ "false", "true" ]
    Default: "true"
    Description: "Save resources information in s3 file"
    Type: String

  # Network parameters
  FirstAccountId:
    Default: '612187453729'
    Description: First AWS Account ID for VPC peering
    Type: String
  FirstRegion:
    Description: Region of the first AWS Account for VPC peering
    Type: String
    Default: eu-west-3
  Phase:
    AllowedValues: [ "Phase1", "Phase2" ]
    Default: Phase1
    Description: "Deploy successively Phase1 and Phase2 and alternate between th two Accounts"
    Type: String
  SecondAccountId:
    Default: '612187453729'
    Description: Second AWS Account ID for VPC peering
    Type: String
  SecondRegion:
    Description: Region of the second AWS Account for VPC peering
    Type: String
    Default: eu-central-1
  
  InternetGatewayName:
    Default: "VPC-IGW"
    Type: String
  VpcPeeringConnectionName:
    Default: VpcPeeringConnection
    Description: Name of the VPC Peering Connection
    Type: String

Mappings:
  RegionMap:
    eu-west-3:
      PeerRegion: eu-central-1
      VpcName: "A-VPC"
      VpcCidrBlock: 10.10.0.0/16
      VPCPeeringConnectionName: "A-VPCPeering"
      SubnetName: "A"
      SubnetCidrBlock: 10.10.0.0/24
      MapPublicIpOnLaunch: true
      DefaultRouteTableName: "A-VPC-Default-RT"      
      SubnetRouteTableName: "A-Subnet-RT"
      InstanceElasticIP: "true"
      InstanceName: "A-Instance"
      InstanceImageId: ami-015875403620174eb
      InstanceType: t2.micro
      KeyName: "dso-paris"
      InstanceIngressCidrIp: 0.0.0.0/0
    eu-central-1:
      PeerRegion: eu-west-3
      VpcName: "B-VPC"
      VpcCidrBlock: 10.20.0.0/16
      VPCPeeringConnectionName: "B-VPCPeering"
      SubnetName: "B"
      SubnetCidrBlock: 10.20.0.0/24
      MapPublicIpOnLaunch: false
      DefaultRouteTableName: "B-VPC-Default-RT"      
      SubnetRouteTableName: "B-Subnet-RT"
      InstanceElasticIP: "false"
      InstanceName: "B-Instance"
      InstanceImageId: ami-00060fac2f8c42d30
      InstanceType: t2.micro
      KeyName: "dso-francfort"
      InstanceIngressCidrIp: 10.10.0.0/16

Conditions:
  IsFirstAccount: !Equals [!Ref "AWS::Region", !Ref FirstRegion]
  IsSecondAccount: !Equals [!Ref "AWS::Region", !Ref SecondRegion]
  IsPhaseSecondPhase:  !Equals [ "Phase2", !Ref Phase] 

Resources:
  Lambdas:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_Lambdas.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        ApplicationLogLevel: DEBUG

  # Create a role for remote account to create VPC Peering
  Roles:
    Type: AWS::CloudFormation::Stack
    Condition: IsFirstAccount
    DeletionPolicy: Delete
    DependsOn: Lambdas
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_Role.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        FirstAccountId: !Ref FirstAccountId
        PeerRequesterAccountId: !Ref SecondAccountId

  VpcAndSubnets:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    DependsOn:
      - Lambdas
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_VpcAndSubnets.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        SubnetCidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetCidrBlock]
        SubnetName: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetName]
        MapPublicIpOnLaunch: !FindInMap [RegionMap, !Ref "AWS::Region", MapPublicIpOnLaunch]
        VpcCidrBlock: !FindInMap [RegionMap, !Ref "AWS::Region", VpcCidrBlock]
        VpcName: !FindInMap [RegionMap, !Ref "AWS::Region", VpcName]

  # Make VPC peering with the first account
  VPCPeering:
    Type: AWS::CloudFormation::Stack
    Condition: IsSecondAccount
    DependsOn:
      - Lambdas
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_VpcPeering.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        PeerOwnerId: !Ref FirstAccountId
        PeerRegion: !Ref FirstRegion
        PeerVpcName: !FindInMap [RegionMap, !Ref FirstRegion, VpcName]
        VpcId: !GetAtt VpcAndSubnets.Outputs.VpcId
        VpcPeeringConnectionName: !Ref VpcPeeringConnectionName

  # Create Internet Gateway and default route table for public subnet
  Gateways:
    Type: AWS::CloudFormation::Stack
    Condition: IsFirstAccount
    DeletionPolicy: Delete
    DependsOn:
      - Lambdas
      - Roles
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_Gateway.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        IgwName:  !Ref InternetGatewayName
        VpcId: !GetAtt VpcAndSubnets.Outputs.VpcId

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    DependsOn:
      - Lambdas
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_SecurityGroups.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        InstanceIngressCidrIp: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceIngressCidrIp]
        InstanceVpcId: !GetAtt VpcAndSubnets.Outputs.VpcId

  Instances:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    DependsOn:
      - Lambdas
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_Instances.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        InstanceElasticIP: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceElasticIP]
        InstanceImageId: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceImageId]
        InstanceName: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceName]
        InstanceType: !FindInMap [RegionMap, !Ref "AWS::Region", InstanceType]
        InstanceSecurityGroup: !GetAtt SecurityGroups.Outputs.InstanceSecurityGroupId
        InstanceSubnetId: !GetAtt VpcAndSubnets.Outputs.SubnetId
        KeyName: !FindInMap [RegionMap, !Ref "AWS::Region", KeyName]

  # Create Route Tables and Routes between subnets
  RouteTables:
    Type: AWS::CloudFormation::Stack
    Condition: IsPhaseSecondPhase
    DeletionPolicy: Delete
    DependsOn:
      - Lambdas
    UpdateReplacePolicy: Retain
    Properties:
      TemplateURL: !Sub "https://${Bucket}.s3.eu-west-3.amazonaws.com/${BucketKey}/51_RouteTables.yaml"
      TimeoutInMinutes: 5
      Parameters:
        Bucket: !Ref Bucket
        BucketKey: !Ref BucketKey
        BucketObject: !Ref BucketObject
        EnvironmentName: !Ref EnvironmentName
        ProjectName: !Ref ProjectName
        SaveInS3File: !Ref SaveInS3File
        DestinationCidrBlock: !FindInMap
          - RegionMap
          - !FindInMap [RegionMap, !Ref "AWS::Region", PeerRegion]
          - VpcCidrBlock
        FirstRegion: !Ref FirstRegion
        SecondRegion: !Ref SecondRegion
        InternetGatewayId: !If [ IsFirstAccount, !GetAtt Gateways.Outputs.InternetGatewayId, ""]
        RouteTableNames: !FindInMap [RegionMap, !Ref "AWS::Region", DefaultRouteTableName]
        SubnetId: !GetAtt VpcAndSubnets.Outputs.SubnetId
        VpcId: !GetAtt VpcAndSubnets.Outputs.VpcId
        VpcPeeringConnectionName: !Ref VpcPeeringConnectionName
