---
AWSTemplateFormatVersion: "2010-09-09"
Description:  This template for creating lambda used by CloudFormation other's stacks
  # aws ec2 describe-transit-gateways --region <Region> --transit-gateway-ids <Customer Gateway Id>
  # Event JSON to test Lambda
  # {
  #   "ResourceProperties": {
  #     "Bucket": "hawkfund-cloudformation",
  #     "BucketKey": "hawkfund-cloudformation/90_SiteToSiteVpn",
  #     "BucketObject": "Data.json",
  #     "Key": "eu-central-1:ANS:dev:EC2:TransitGateway:MyTransitGateway",
  #     "TransitGatewayId": "cgw-036c50cebe8717c74"
  #   }
  # }

Parameters:
  # Stack parameters
  ApplicationLogLevel:
    AllowedValues: [ TRACE, DEBUG, INFO, WARN, ERROR, FATAL ]
    Default: ERROR
    Description: |
      Set this property to filter the application logs for your function that Lambda sends to CloudWatch. 
      Lambda only sends application logs at the selected level of detail and lower, 
      where TRACE is the highest level and FATAL is the lowest.
    Type: String
  FunctionName:
    Default: TransitGatewayParametersToS3
    Type: String
  LogFormat:
    AllowedValues: [ Text, JSON ]
    Default: JSON
    Description: |
      The format in which Lambda sends your function's application and system logs to CloudWatch.
      Select between plain text and structured JSON.
    Type: String
  LogGroupClass:
    AllowedValues: [ STANDARD, INFREQUENT_ACCESS ]
    Default: STANDARD
    Description: Specifies the log group class for this log group. 
    Type: String
  RetentionInDays:
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653 ]
    Default: 1
    Description: |
      The number of days to retain the log events in the specified log group.
      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.
    Type: String
  SystemLogLevel:
    AllowedValues: [ DEBUG, INFO, WARN ]
    Default: WARN
    Description: |
      Set this property to filter the system logs for your function that Lambda sends to CloudWatch.
      Lambda only sends system logs at the selected level of detail and lower,
      where DEBUG is the highest level and WARN is the lowest.
    Type: String

Resources:
  TransitGatewayParametersToS3LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupClass: !Ref LogGroupClass
      LogGroupName: !Sub "/aws/lambda/${FunctionName}"
      RetentionInDays: !Ref RetentionInDays
    UpdateReplacePolicy: Delete

  TransitGatewayParametersToS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          s3_client = boto3.client('s3')
          ec2_client = boto3.client('ec2')

          def get_node(my_dict, paths) -> dict:
              for key in paths:
                  my_dict = my_dict.setdefault(key, {})
              return my_dict

          def lambda_handler(event, context):
            bucket =  event["ResourceProperties"]["Bucket"]
            bucket_key = event["ResourceProperties"]["BucketKey"]
            bucket_object = event["ResourceProperties"]["BucketObject"]
            parameter_key = event["ResourceProperties"]["Key"]
            transit_gateway_id = event["ResourceProperties"]["CustomerGatewayId"]
            key = bucket_key + "/" + bucket_object
            data = {}
            response_data = {}

            try:
              # Get Customer Gateway parameters
              transit_gateway_data = ec2_client.describe_transit_gateways(CustomerGatewayIds=[ transit_gateway_id ])
            except Exception as err:
              print("WARNING: Wrong Customer GatewayID: ", transit_gateway_id)
              response_data["Data"] = str(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")

            try:
              # Read data file from s3
              s3_response = s3_client.get_object(
                  Bucket=bucket,
                  Key=key
              )
              json_data = s3_response["Body"].read().decode('utf-8')
              data = json.loads(json_data)
            except Exception as err:
              print("WARNING: No file present on the s3 Bucket, starting a new file!")

            paths = parameter_key.split(":")
            get_node(data, paths)['TransitGatewayId'] = transit_gateway_data['TransitGateways'][0]['TransitGatewayId']
            get_node(data, paths)['TransitGatewayArn'] = transit_gateway_data['TransitGateways'][0]['TransitGatewayArn']
            get_node(data, paths)['State'] = transit_gateway_data['TransitGateways'][0]['State']
            get_node(data, paths)['OwnerId'] = transit_gateway_data['TransitGateways'][0]['OwnerId']
            get_node(data, paths)['Description'] = transit_gateway_data['TransitGateways'][0]['Description']
            get_node(data, paths)['CreationTime'] = transit_gateway_data['TransitGateways'][0]['CreationTime']
            get_node(data, paths)['AmazonSideAsn'] = transit_gateway_data['TransitGateways'][0]['Options']['AmazonSideAsn']
            get_node(data, paths)['AutoAcceptSharedAttachments'] = transit_gateway_data['TransitGateways'][0]['Options']['AutoAcceptSharedAttachments']
            get_node(data, paths)['DefaultRouteTableAssociation'] = transit_gateway_data['TransitGateways'][0]['Options']['DefaultRouteTableAssociation']
            get_node(data, paths)['AssociationDefaultRouteTableId'] = transit_gateway_data['TransitGateways'][0]['Options']['AssociationDefaultRouteTableId']
            get_node(data, paths)['DefaultRouteTablePropagation'] = transit_gateway_data['TransitGateways'][0]['Options']['DefaultRouteTablePropagation']
            get_node(data, paths)['PropagationDefaultRouteTableId'] = transit_gateway_data['TransitGateways'][0]['Options']['PropagationDefaultRouteTableId']
            get_node(data, paths)['VpnEcmpSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['VpnEcmpSupport']
            get_node(data, paths)['DnsSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['DnsSupport']
            get_node(data, paths)['SecurityGroupReferencingSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['SecurityGroupReferencingSupport']
            get_node(data, paths)['MulticastSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['MulticastSupport']

            try:
              # Wrote data file from s3
              s3_response = s3_client.put_object(
                  Body=bytes(json.dumps(data).encode('UTF-8')),
                  Bucket=bucket,
                  Key=key
              )
              response_data['BgpAsn'] = transit_gateway_data['CustomerGateways'][0]['BgpAsn']
              response_data['TransitGatewayId'] = transit_gateway_data['TransitGateways'][0]['TransitGatewayId']
              response_data['TransitGatewayArn'] = transit_gateway_data['TransitGateways'][0]['TransitGatewayArn']
              response_data['State'] = transit_gateway_data['TransitGateways'][0]['State']
              response_data['OwnerId'] = transit_gateway_data['TransitGateways'][0]['OwnerId']
              response_data['Description'] = transit_gateway_data['TransitGateways'][0]['Description']
              response_data['CreationTime'] = transit_gateway_data['TransitGateways'][0]['CreationTime']
              response_data['AmazonSideAsn'] = transit_gateway_data['TransitGateways'][0]['Options']['AmazonSideAsn']
              response_data['AutoAcceptSharedAttachments'] = transit_gateway_data['TransitGateways'][0]['Options']['AutoAcceptSharedAttachments']
              response_data['DefaultRouteTableAssociation'] = transit_gateway_data['TransitGateways'][0]['Options']['DefaultRouteTableAssociation']
              response_data['AssociationDefaultRouteTableId'] = transit_gateway_data['TransitGateways'][0]['Options']['AssociationDefaultRouteTableId']
              response_data['DefaultRouteTablePropagation'] = transit_gateway_data['TransitGateways'][0]['Options']['DefaultRouteTablePropagation']
              response_data['PropagationDefaultRouteTableId'] = transit_gateway_data['TransitGateways'][0]['Options']['PropagationDefaultRouteTableId']
              response_data['VpnEcmpSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['VpnEcmpSupport']
              response_data['DnsSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['DnsSupport']
              response_data['SecurityGroupReferencingSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['SecurityGroupReferencingSupport']
              response_data['MulticastSupport'] = transit_gateway_data['TransitGateways'][0]['Options']['MulticastSupport']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
            except Exception as err:
              print("ERROR: Can't save to s3 Bucket")
              response_data["Data"] = str(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")
      Description: Function to update parameter from JSON file in a S3 bucket
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      LoggingConfig:
        ApplicationLogLevel: !Ref ApplicationLogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/${FunctionName}"
        SystemLogLevel: !Ref SystemLogLevel
      MemorySize: 128
      Role: !Join [":", ["arn:aws:iam:", !Sub "${AWS::AccountId}", "role/TransitGatewayParametersToS3Role" ] ]
      Runtime: python3.12

Outputs:
  UpdateParametersFromS3Arn:
    Description: "ARN of TransitGatewayParametersToS3 Lambda"
    Value: !GetAtt TransitGatewayParametersToS3Function.Arn    