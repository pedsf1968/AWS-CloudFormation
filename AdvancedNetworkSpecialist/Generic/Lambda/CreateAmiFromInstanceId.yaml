---
AWSTemplateFormatVersion: "2010-09-09"
Description:  This template for creating Lambda to create AMI
# Event JSON to test Lambda
# {
#     "ResourceProperties": {
#         "InstanceId": "i-0c18f4f4d7038f046",
#         "Name": "WebServer-AMI"
#     }
# }

Parameters:
  # Stack parameters
  ApplicationLogLevel:
    AllowedValues: [ TRACE, DEBUG, INFO, WARN, ERROR, FATAL ]
    Default: ERROR
    Description: |
      Set this property to filter the application logs for your function that Lambda sends to CloudWatch. 
      Lambda only sends application logs at the selected level of detail and lower, 
      where TRACE is the highest level and FATAL is the lowest.
    Type: String
  FunctionName:
    Default: CreateAmiFromInstanceId
    Type: String
  LogFormat:
    AllowedValues: [ Text, JSON ]
    Default: JSON
    Description: |
      The format in which Lambda sends your function's application and system logs to CloudWatch.
      Select between plain text and structured JSON.
    Type: String
  LogGroupClass:
    AllowedValues: [ STANDARD, INFREQUENT_ACCESS ]
    Default: STANDARD
    Description: Specifies the log group class for this log group. 
    Type: String
  RetentionInDays:
    AllowedValues: [ 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, 3653 ]
    Default: 1
    Description: |
      The number of days to retain the log events in the specified log group.
      Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653.
    Type: String
  SystemLogLevel:
    AllowedValues: [ DEBUG, INFO, WARN ]
    Default: WARN
    Description: |
      Set this property to filter the system logs for your function that Lambda sends to CloudWatch.
      Lambda only sends system logs at the selected level of detail and lower,
      where DEBUG is the highest level and WARN is the lowest.
    Type: String

Resources:
  CreateAmiFromInstanceIdLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupClass: !Ref LogGroupClass
      LogGroupName: !Sub "/aws/lambda/${FunctionName}"
      RetentionInDays: !Ref RetentionInDays
    UpdateReplacePolicy: Delete

  CreateAmiFromInstanceId:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json

          ec2_client = boto3.client("ec2")

          def lambda_handler(event, context):
            response_data  = {}
            print("event:", event)
            instanceId =  event["ResourceProperties"]["InstanceId"]
            amiName =  event["ResourceProperties"]["Name"]

            # Search AMI with the same name
            filters = [
                {
                    'Name': 'name',
                    'Values': [amiName]
                }
            ]

            # Call EC2 to describe images with the filter applied
            response = ec2_client.describe_images(Owners=['self'], Filters=filters)

            for image in response['Images']:
              print(f"Image ID: {image['ImageId']}, Name: {image['Name']}")
              # Deregister Ami and delete snapshot
              ec2_client.deregister_image(ImageId=image['ImageId'])

            try:
              # Create AMI              
              response = ec2_client.create_image(
                InstanceId=instanceId,  
                Name=amiName, 
                NoReboot=True)
              response_data["ImageId"] = response["ImageId"]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
            except Exception as err:
              print("ERROR: ", err)
              response_data["Data"] = str(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data, "CustomResourcePhysicalID")
      Description: Function to create AMI from created instance
      FunctionName: !Ref FunctionName
      Handler: index.lambda_handler
      LoggingConfig:
        ApplicationLogLevel: !Ref ApplicationLogLevel
        LogFormat: !Ref LogFormat
        LogGroup: !Sub "/aws/lambda/${FunctionName}"
        SystemLogLevel: !Ref SystemLogLevel
      MemorySize: 128
      Role: !Join [":", ["arn:aws:iam:", !Sub "${AWS::AccountId}", "role/CreateAmiFromInstanceIdRole" ] ]
      Runtime: python3.12

Outputs:
  LambdaFunctionArn:
    Description: "ARN of CreateAmiFromInstanceId Lambda"
    Value: !GetAtt CreateAmiFromInstanceId.Arn